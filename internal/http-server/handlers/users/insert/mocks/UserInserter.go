// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	internal "usergenerator/internal/lib/api/model/user"

	mock "github.com/stretchr/testify/mock"
)

// UserInserter is an autogenerated mock type for the UserInserter type
type UserInserter struct {
	mock.Mock
}

// InsertUsers provides a mock function with given fields: users
func (_m *UserInserter) InsertUsers(users ...internal.User) ([]int64, error) {
	_va := make([]interface{}, len(users))
	for _i := range users {
		_va[_i] = users[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(...internal.User) ([]int64, error)); ok {
		return rf(users...)
	}
	if rf, ok := ret.Get(0).(func(...internal.User) []int64); ok {
		r0 = rf(users...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(...internal.User) error); ok {
		r1 = rf(users...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserInserter interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserInserter creates a new instance of UserInserter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserInserter(t mockConstructorTestingTNewUserInserter) *UserInserter {
	mock := &UserInserter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
